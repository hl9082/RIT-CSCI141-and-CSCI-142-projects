#BlueJ class context
comment0.target=TilesModel
comment0.text=\r\n\ The\ model\ for\ the\ Tiles\ 2048\ game.\r\n\r\n\ @author\ CS\ RIT\r\n
comment1.params=levelName
comment1.target=TilesModel(java.lang.String)
comment1.text=\r\n\ Create\ a\ new\ game\r\n\ @param\ levelName\ the\ difficulty\ level\ of\ the\ game\r\n
comment10.params=
comment10.target=boolean\ hasWon()
comment10.text=\r\n\ Is\ there\ a\ cell\ in\ the\ board\ with\ the\ GOAL\ number?\r\n\r\n\ @return\ whether\ there\ is\ a\ cell\ with\ the\ GOAL\ number\r\n
comment11.params=
comment11.target=boolean\ hasLost()
comment11.text=\r\n\ Is\ the\ game\ over?\ The\ user\ will\ lose\ the\ game\r\n\ if\ the\ board\ is\ full\ and\ none\ of\ the\ tiles\ can\ be\ joined\ together.\r\n\r\n\ @return\ whether\ the\ board\ is\ full\ and\ none\ of\ the\ tiles\ can\ be\ joined\ together.\r\n
comment12.params=direction
comment12.target=void\ move(Direction)
comment12.text=\r\n\ Move\ all\ the\ tiles\ in\ the\ board\ in\ the\ given\ direction\ and\ update\ the\ game's\ statistics.\r\n\r\n\ @param\ direction\ the\ direction\r\n
comment13.params=direction
comment13.target=int\ moveTiles(Direction)
comment13.text=\r\n\ Helper\ function\ that\ moves\ all\ tiles\ in\ the\ board\ in\ the\ given\ direction.\r\n\ Tiles\ with\ the\ same\ number\ merge\ into\ one\ when\ they\ touch.\r\n\r\n\ @param\ direction\ The\ direction\r\n\ @return\ points\ the\ sum\ of\ the\ numbers\ of\ the\ tiles\ merged\ during\ this\ movement\r\n
comment14.params=row\ col\ delta
comment14.target=int\ moveTiles(int,\ int,\ TilesModel.Coordinates)
comment14.text=\r\n\ Move\ the\ tiles\ of\ a\ given\ row\ or\ column\ according\ to\ the\ delta\ coordinates.\r\n\ The\ delta\ coordinates\ specify\ whether\ the\ tiles\ will\ be\ moved\ horizontally\ (column-wise)\r\n\ or\ vertically\ (row-wise).\r\n\r\n\ @param\ row\ \ \ the\ row\r\n\ @param\ col\ \ \ the\ column\r\n\ @param\ delta\ the\ delta\ coordinates\r\n\ @return\ the\ sum\ of\ all\ the\ tiles'\ number\ joined\ together\r\n
comment15.params=destRow\ destCol\ fromRow\ fromCol
comment15.target=int\ joinTiles(int,\ int,\ int,\ int)
comment15.text=\r\n\ Join\ the\ tiles\ from\ the\ given\ coordinates.\ The\ new\ number\ of\ the\ join\ operation\ will\ be\ stored\ in\ the\r\n\ destination\ coordinates\ (destRow,\ destCol).\ The\ other\ tile\ (fromRow,\ fromCol)\ will\ be\ cleared\ (EMPTY\ value)\ from\ the\ board.\r\n\r\n\ @param\ destRow\ the\ row\ of\ the\ tile\ which\ contains\ the\ new\ number\ after\ joining\ both\ tiles\r\n\ @param\ destCol\ the\ column\ of\ the\ tile\ which\ contains\ the\ new\ number\ after\ joining\ both\ tiles\r\n\ @param\ fromRow\ the\ row\ of\ the\ tile\ to\ join\ with\ the\ destination\ tile.\r\n\ @param\ fromCol\ the\ column\ of\ the\ tile\ to\ join\ with\ the\ destination\ tile.\r\n\ @return\ the\ new\ tile's\ number\ after\ the\ join\ operation.\r\n
comment16.params=row\ col\ delta
comment16.target=TilesModel.Coordinates\ getNextTile(int,\ int,\ TilesModel.Coordinates)
comment16.text=\r\n\ Returns\ the\ position\ of\ the\ next\ non-empty\ tile\r\n\r\n\ @param\ row\ \ \ the\ starting\ row\ position\ to\ look\ for\ the\ non-empty\ tile\r\n\ @param\ col\ \ \ the\ starting\ column\ position\ to\ look\ for\ the\ non-empty\ tile\r\n\ @param\ delta\ the\ delta\ coordinates\ to\ move\ to\ the\ next\ cell\ in\ the\ board\r\n\ @return\ the\ index\ of\ the\ next\ non-empty\ tile.\ If\ there\ is\ non-empty\ tile,\ returns\ null.\r\n
comment17.params=
comment17.target=void\ shutdown()
comment17.text=\r\n\ Same\ some\ model's\ statistics\ before\ shutting\ down\ the\ game.\r\n
comment18.params=
comment18.target=boolean\ saveScore()
comment18.text=\r\n\ Save\ the\ best\ score\ in\ a\ file\ (see\ BEST_SCORE_FILE_NAME)\ only\ if\ it\ has\ been\ improved.\r\n\r\n\ @return\ whether\ the\ best\ score\ has\ been\ updated\ and\ stored\ into\ the\ file\ correctly.\r\n
comment19.params=
comment19.target=void\ newGame()
comment19.text=\r\n\ Reset\ the\ game\r\n
comment2.params=
comment2.target=void\ init()
comment2.text=\r\n\ Initialize\ the\ board\ and\ create\ two\ random\ tiles\r\n
comment20.params=
comment20.target=boolean\ isGameOver()
comment20.text=\r\n\ Is\ the\ game\ over?\r\n\r\n\ @return\ whether\ the\ player\ has\ won\ or\ lost\ the\ game\r\n
comment21.params=
comment21.target=java.lang.String\ toString()
comment21.text=\r\n\ A\ human-readable\ representation\ of\ the\ model.\r\n\ Displays\ the\ entire\ board\ plus\ some\ game's\ statistics\ (e.g.\ number\ of\ moves,\ score,\ best\ score)\r\n\r\n\ @return\ the\ string\ representation\ of\ the\ model.\r\n
comment22.params=message
comment22.target=void\ notifyObservers(java.lang.String)
comment22.text=\r\n\ When\ the\ model\ changes,\ the\ observers\ are\ notified\ via\ their\ update\ method\r\n
comment23.params=amount
comment23.target=void\ updateScore(int)
comment23.text=\r\n\ Update\ the\ score\ with\ the\ given\ amount.\ If\ the\ score\ is\ greater\ than\ the\ best\ score,\ then,\ it\ updates\r\n\ also\ the\ best\ score.\r\n\r\n\ @param\ amount\ the\ amount\r\n
comment24.params=
comment24.target=void\ addNewTile()
comment24.text=\r\n\ Generate\ a\ new\ tile\ in\ a\ random\ empty\ position\ at\ the\ board.\r\n\ The\ tile\ will\ have\ a\ random\ value\ from\ the\ list\ of\ possible\ initial\ values\ (INITIAL_TILE_VALUES)\r\n
comment25.params=row\ col
comment25.target=boolean\ inBounds(int,\ int)
comment25.text=\r\n\ Are\ these\ coordinates\ in\ bounds?\r\n\r\n\ @param\ row\ the\ row\ coordinate\r\n\ @param\ col\ the\ column\ coordinate\r\n\ @return\ whether\ the\ coordinates\ are\ within\ the\ boundaries\ of\ the\ board.\r\n
comment3.params=observer
comment3.target=void\ addObserver(Observer)
comment3.text=\r\n\ The\ view\ calls\ this\ method\ to\ add\ themselves\ as\ an\ observer\ of\ the\ model.\r\n\r\n\ @param\ observer\ the\ observer\r\n
comment4.params=
comment4.target=int\ getMovesMade()
comment4.text=\r\n\ Get\ the\ number\ of\ moves\ that\ have\ been\ made.\r\n\r\n\ @return\ moves\ made\r\n
comment5.params=
comment5.target=TilesModel.GameStatus\ getGameStatus()
comment5.text=\r\n\ Get\ the\ status\ of\ the\ game.\r\n\r\n\ @return\ game\ status\r\n
comment6.params=row\ col
comment6.target=int\ getContent(int,\ int)
comment6.text=\r\n\ Get\ the\ value\ stored\ in\ a\ given\ row\ and\ column\r\n\r\n\ @param\ row\ the\ row\r\n\ @param\ col\ the\ col\r\n\ @return\ the\ value\ stored\ in\ that\ cell,\ or\ EMPTY\ if\ there\r\n\ is\ no\ value.\r\n
comment7.params=
comment7.target=int\ getScore()
comment7.text=\r\n\ Get\ the\ player's\ current\ score.\r\n\r\n\ @return\ current\ score\r\n
comment8.params=
comment8.target=int\ getBestScore()
comment8.text=\r\n\ Get\ the\ best\ score\ achieved\ in\ a\ game\r\n\r\n\ @return\ the\ best\ score\r\n
comment9.params=
comment9.target=void\ ready()
comment9.text=\r\n\ Notify\ the\ observers\ that\ the\ game\ is\ ready.\r\n\ This\ method\ is\ called\ only\ once\ from\ the\ View\r\n\ (last\ step\ in\ the\ JavaFX\ start\ method),\ once\ the\ View\ is\ ready\r\n\ to\ display\ all\ the\ model's\ information.\r\n
numComments=26
