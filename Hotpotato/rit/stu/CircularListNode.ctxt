#BlueJ class context
comment0.target=CircularListNode
comment0.text=\r\n\ An\ implementation\ of\ a\ cursor\ based\ circular\ list\ \r\n\ using\ the\ doubly\ linked\ node,\ DLNode.\r\n\ \r\n\ @author\ Huy\ Le\r\n
comment1.params=
comment1.target=CircularListNode()
comment1.text=\r\n\ Initialize\ the\ list\ to\ be\ empty.\ \ This\ means\ the\ head\ and\ cursor\ are\ both\ null\r\n\ and\ the\ size\ is\ 0.\r\n
comment10.params=
comment10.target=java.lang.Object\ removeBackward()
comment10.text=\r\n\ Remove\ the\ element\ at\ the\ cursor\ and\ then\ advance\ it\ \r\n\ forward\ to\ the\ next\ element.\ In\ the\ case\ the\ head\ is\ removed,\ \r\n\ the\ head\ moves\ forward\ to\ the\ next\ element,\ if\ possible.\r\n\ \r\n\ @return\ the\ element\ at\ the\ cursor.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Returns\ a\ string\ in\ the\ format\:\r\n\ \ \ \ \ Player\ <--\ CURSOR\r\n\ \ \ \ \ Player\r\n\ \ \ \ \ Player\r\n\ \ \ \ \ ...\r\n\ \r\n\ \ \ \ Where\ "<--\ CURSOR"\ points\ to\ the\ player\ at\ the\ cursor.\r\n\ \ \ \ If\ the\ list\ is\ empty\:\r\n\ \ \ \ \ Empty\ list\!\r\n\ \r\n\ \ \ \ Very\ important\!\ \r\n\ \ \ \ Use\ System.lineSeparator()\ instead\ of\ "\\n"\ when\ adding\ a\ new\ line\!\!\!\r\n
comment2.params=element
comment2.target=void\ append(java.lang.Object)
comment2.text=\r\n\ Append\ a\ new\ element\ to\ the\ end\ of\ the\ list.\r\n\ @param\ element\ -\ the\ new\ element\ to\ append\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Returns\ the\ size\ of\ the\ list.\r\n\ \r\n\ @return\ the\ number\ of\ elements\ in\ the\ list.\r\n
comment4.params=
comment4.target=boolean\ valid()
comment4.text=\r\n\ Is\ the\ cursor\ pointing\ to\ a\ valid\ element\ in\ the\ list?\r\n\ @return\ whether\ the\ cursor\ is\ valid\ or\ not.\r\n
comment5.params=
comment5.target=void\ reset()
comment5.text=\r\n\ Reset\ the\ cursor\ to\ point\ to\ the\ head\ of\ the\ list\ \r\n\ (if\ one\ exists),\ \r\n\ otherwise\ set\ it\ to\ be\ off\ the\ list\ (invalid)\r\n
comment6.params=
comment6.target=void\ forward()
comment6.text=\r\n\ Move\ the\ cursor\ forward\ to\ the\ next\ element.\r\n
comment7.params=
comment7.target=void\ backward()
comment7.text=\r\n\ Move\ the\ cursor\ backward\ to\ the\ next\ element.\r\n
comment8.params=
comment8.target=java.lang.Object\ get()
comment8.text=\r\n\ Get\ the\ element\ at\ the\ cursor\ position.\r\n
comment9.params=
comment9.target=java.lang.Object\ removeForward()
comment9.text=\r\n\ Remove\ the\ element\ at\ the\ cursor\ and\ then\ advance\ \r\n\ it\ forward\ to\ the\ next\ element.\ \r\n\ In\ the\ case\ the\ head\ is\ removed,\ \r\n\ the\ head\ moves\ forward\ to\ the\ next\ element,\ if\ possible.\r\n\ \r\n\ @return\ the\ element\ at\ the\ cursor.\r\n
numComments=12
