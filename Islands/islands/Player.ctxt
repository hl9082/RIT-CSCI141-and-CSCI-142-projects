#BlueJ class context
comment0.target=Player
comment0.text=\r\n\ Represents\ a\ player\ in\ the\ Islands\ game..\r\n\r\n\ @author\ RIT\ CS\r\n\ @author\ Huy\ Le\r\n\ \r\n
comment1.params=role\ direction
comment1.target=Player(PlayerRole,\ Direction)
comment1.text=\r\n\ Creates\ the\ player.\ By\ default,\ the\ player\ has\ no\r\n\ islands.\r\n\ \r\n\ @param\ role\ -\ The\ player's\ role.\r\n\ @param\ direction\ -\ The\ orientation\ associated\ to\ the\ player\ to\ \r\n\ check\ whether\ the\ game\ is\ over.\ \r\n\ For\ example,\ if\ player\ has\ Direction.HORIZONTAL,\ \r\n\ the\ game\ will\ be\ over\ if\ the\ player\ has\ an\ island\ \r\n\ that\ touches\ both\ the\ left\ and\ right\ boundaries\ of\ the\ board.\r\n\ \r\n\ \r\n
comment10.params=other
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\r\n\ Two\ players\ are\ equal\ if\ they\ have\ the\ same\ role.\r\n\ @param\ other\ -\ the\ player\ to\ compare\ with.\r\n\ @return\ whether\ they\ are\ equals\ or\ not.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Get\ the\ player's\ role\ and\ their\ number\ of\ islands,\ e.g.\:\r\n\ Player\:\ RED,\ islands\:\ 3\r\n\ @return\ a\ string\ \r\n\ in\ the\ format\ "Player\:\ {role},\ islands\:\ {\#_of_islands}"\r\n
comment2.params=
comment2.target=PlayerRole\ getRole()
comment2.text=\r\n\ Get\ the\ role.\r\n\ @return\ the\ player's\ role.\r\n
comment3.params=
comment3.target=Direction\ getDirection()
comment3.text=\r\n\ Get\ the\ direction\ associated\ to\ this\ player.\r\n\ \r\n\ @return\ the\ direction\ this\ player\ checks\ to\ detect\ whether\ the\ game\ is\ over.\r\n\r\n
comment4.params=cell
comment4.target=void\ claim(Cell)
comment4.text=\r\n\ Creates\ an\ island\ with\ the\ given\ cell\ and\ adds\ it\ to\ the\ player's\ \r\n\ collection\ of\ islands.\r\n\ This\ method\ must\ first\ claim\ the\ cell.\r\n\ Then,\ it\ will\ initially\ create\ an\ island\ containing\ only\ the\ given\ cell.\r\n\ Finally,\ it\ will\ merge\ this\ new\ island\ with\ its\ four\ cardinal\ neighbor\ islands.\r\n\ @param\ cell\ -\ the\ cell\ to\ be\ claimed.\r\n
comment5.params=rows\ cols
comment5.target=boolean\ touchesBoardBoundaries(int,\ int)
comment5.text=\r\n\ Checks\ whether\ any\ of\ the\ player's\ island\ touches\ \r\n\ both\ the\ boundaries\ of\ the\ board\ according\ to\ the\ \r\n\ player's\ direction.\r\n\ @param\ rows\ -\ the\ board's\ number\ of\ rows.\r\n\ @param\ cols\ -\ the\ board's\ number\ of\ columns.\r\n\ @return\ whether\ this\ player\ has\ an\ island\ \r\n\ that\ touches\ the\ board's\ boundaries.\r\n
comment6.params=
comment6.target=int\ getNumIslands()
comment6.text=\r\n\ Get\ the\ number\ of\ islands\ this\ player\ is\ owner.\r\n\ @return\ the\ number\ of\ islands.\r\n
comment7.params=
comment7.target=java.util.ArrayList\ getIslands()
comment7.text=\r\n\ Get\ the\ collection\ of\ islands\ this\ player\ is\ owner.\r\n\ @return\ the\ collection\ of\ islands.\r\n
comment8.params=cell
comment8.target=void\ mergeIslands(Cell)
comment8.text=\r\n\ Attempt\ to\ merge\ this\ cell\ with\ its\ four\ \r\n\ cardinal\ neighbor\ islands.\r\n\ Create\ initially\ a\ new\ island,\ newIsland,\ \r\n\ with\ only\ the\ given\ cell.\r\n\ Get\ this\ player's\ islands\ that\ are\ neighbors\ \r\n\ to\ the\ given\ cell.\r\n\ Iterate\ over\ the\ collection\ of\ neighbors\ islands\:\r\n?\ \ \ \ *\ merge\ the\ island\ into\ newIsland\r\n?\ \ \ \ *\ remove\ the\ island\ from\ the\ player's\ collection\ of\ islands\r\n\ Add\ newIsland\ into\ the\ player's\ collection\ of\ islands\r\n\ @param\ cell-the\ cell\ claimed\ by\ the\ player.\r\n
comment9.params=cell
comment9.target=java.util.ArrayList\ getNeighborIslands(Cell)
comment9.text=\r\n\ Gets\ all\ this\ player's\ islands\ that\ \r\n\ are\ neighbors\ to\ the\ given\ cell.\r\n\ @param\ cell\ -\ the\ cell.\r\n\ @return\ The\ player's\ islands\ that\ \r\n\ are\ neighbors\ in\ the\ four\ cardinal\ directions\ \r\n\ of\ the\ given\ cell.\r\n
numComments=12
